# -*- coding: utf-8 -*-
"""MiniNN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XOEeRUknspuVjiyFbRqe_4VCvakObmCr
"""

# Commented out IPython magic to ensure Python compatibility.
import math
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import math
import random

# ore Value class

class Value:
    def __init__(self, data, _children=(), _op='', label=''):
        self.data = data
        self.grad = 0.0
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op
        self.label = label

    def __repr__(self):
        return f"Value(data={self.data:.4f})"

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += 1.0 * out.grad
            other.grad += 1.0 * out.grad
        out._backward = _backward
        return out

    def __radd__(self, other): return self + other

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward
        return out

    def __rmul__(self, other): return self * other
    def __neg__(self): return self * -1
    def __sub__(self, other): return self + (-other)
    def __truediv__(self, other): return self * other**-1

    def tanh(self):
        x = self.data
        t = (math.exp(2*x) - 1) / (math.exp(2*x) + 1)
        out = Value(t, (self,), 'tanh')

        def _backward():
            self.grad += (1 - t**2) * out.grad
        out._backward = _backward
        return out

    def exp(self):
        x = self.data
        out = Value(math.exp(x), (self,), 'exp')

        def _backward():
            self.grad += out.data * out.grad
        out._backward = _backward
        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float))
        out = Value(self.data ** other, (self,), f'**{other}')
        def _backward():
            self.grad += other * (self.data ** (other - 1)) * out.grad
        out._backward = _backward
        return out

    def backward(self):
        topo, visited = [], set()
        def build(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build(child)
                topo.append(v)
        build(self)
        self.grad = 1.0
        for node in reversed(topo):
            node._backward()

# Neural network primitives

class Module:
    """Base class for all neural network components."""
    def zero_grad(self):
        for p in self.parameters():
            p.grad = 0.0

    def parameters(self):
        return []

#  MLP Building Blocks

class Neuron(Module):
    def __init__(self, nin, nonlin=True):
        self.w = [Value(random.uniform(-1, 1)) for _ in range(nin)]
        self.b = Value(0)
        self.nonlin = nonlin

    def __call__(self, x):
        act = sum((wi * xi for wi, xi in zip(self.w, x)), self.b)
        return act.tanh() if self.nonlin else act

    def parameters(self):
        return self.w + [self.b]

class Layer(Module):
    def __init__(self, nin, nout, **kwargs):
        self.neurons = [Neuron(nin, **kwargs) for _ in range(nout)]

    def __call__(self, x):
        outs = [n(x) for n in self.neurons]
        return outs[0] if len(outs) == 1 else outs

    def parameters(self):
        return [p for n in self.neurons for p in n.parameters()]

class MLP(Module):
    """Multi-Layer Perceptron"""
    def __init__(self, nin, nouts):
        sz = [nin] + nouts
        self.layers = [Layer(sz[i], sz[i+1], nonlin=(i != len(nouts)-1)) for i in range(len(nouts))]

    def __call__(self, x):
        for layer in self.layers:
            x = layer(x) if isinstance(x, list) else layer([x])
        return x

    def parameters(self):
        return [p for l in self.layers for p in l.parameters()]

# Conv1D Layer

class Conv1D(Module):
    """Naive 1D convolution (no stride, no padding)."""
    def __init__(self, kernel_size):
        self.kernel = [Value(random.uniform(-1, 1)) for _ in range(kernel_size)]
        self.bias = Value(0)

    def __call__(self, x):
        # x is a list of Values (1D input)
        k, n = len(self.kernel), len(x)
        outputs = []
        for i in range(n - k + 1):
            segment = x[i:i+k]
            act = sum((w * v for w, v in zip(self.kernel, segment)), self.bias)
            outputs.append(act.tanh())
        return outputs

    def parameters(self):
        return self.kernel + [self.bias]

#  RNN Cell

class RNNCell(Module):
    """A basic RNN cell that maintains hidden state."""
    def __init__(self, input_size, hidden_size):
        self.Wxh = [Value(random.uniform(-1, 1)) for _ in range(input_size)]
        self.Whh = [Value(random.uniform(-1, 1)) for _ in range(hidden_size)]
        self.bh = Value(0)
        self.hidden_size = hidden_size

    def __call__(self, x, h_prev):
        # Compute new hidden state: h_t = tanh(Wxh * x + Whh * h_prev + b)
        x_term = sum((wx * xi for wx, xi in zip(self.Wxh, x)), Value(0))
        h_term = sum((wh * hi for wh, hi in zip(self.Whh, h_prev)), Value(0))
        h_new = (x_term + h_term + self.bh).tanh()
        return h_new

    def parameters(self):
        return self.Wxh + self.Whh + [self.bh]



if __name__ == "__main__":
    # Example: small MLP
    mlp = MLP(3, [4, 4, 1])  # 3 inputs → 2 hidden layers → 1 output
    x = [Value(2.0), Value(-1.0), Value(0.5)]
    y_pred = mlp(x)
    loss = (y_pred - Value(1.0)) ** 2
    loss.backward()

    print("Loss:", loss.data)
    for p in mlp.parameters()[:5]:
        print(p, p.grad)

"""Small NN

"""

import random

# Base module (optional but helpful for extensibility)
class Module:
    def zero_grad(self):
        for p in self.parameters():
            p.grad = 0.0

    def parameters(self):
        return []

class Neuron(Module):
    def __init__(self, nin, nonlin=True):
        self.w = [Value(random.uniform(-1, 1)) for _ in range(nin)]  # weights
        self.b = Value(random.uniform(-1, 1))  # bias
        self.nonlin = nonlin  # whether to apply tanh activation

    def __call__(self, x):
        # Weighted sum (dot product)
        act = sum((wi * xi for wi, xi in zip(self.w, x)), self.b)
        return act.tanh() if self.nonlin else act

    def parameters(self):
        return self.w + [self.b]

    def __repr__(self):
        return f"{'Tanh' if self.nonlin else 'Linear'}Neuron({len(self.w)})"

class Layer(Module):
    def __init__(self, nin, nout, **kwargs):
        self.neurons = [Neuron(nin, **kwargs) for _ in range(nout)]

    def __call__(self, x):
        outs = [n(x) for n in self.neurons]
        return outs[0] if len(outs) == 1 else outs

    def parameters(self):
        return [p for neuron in self.neurons for p in neuron.parameters()]

    def __repr__(self):
        return f"Layer({len(self.neurons[0].w)}, {len(self.neurons)})"

class MLP(Module):
    def __init__(self, nin, nouts):
        # Example: nin=3, nouts=[4, 4, 1]
        sz = [nin] + nouts
        self.layers = [
            Layer(sz[i], sz[i + 1], nonlin=(i != len(nouts) - 1))
            for i in range(len(nouts))
        ]

    def __call__(self, x):
        for layer in self.layers:
            # Ensure x is always a list of Values
            x = x if isinstance(x, list) else [x]
            x = layer(x)
        return x

    def parameters(self):
        return [p for layer in self.layers for p in layer.parameters()]

    def __repr__(self):
        return f"MLP({', '.join(str(layer) for layer in self.layers)})"

x = [Value(2.0), Value(-1.0), Value(0.5)]
y_true = Value(1.0)

mlp = MLP(3, [4, 4, 1])  # 3 inputs, two hidden layers, 1 output
y_pred = mlp(x)
loss = (y_pred - y_true) ** 2

loss.backward()

print("Loss:", loss.data)
for p in mlp.parameters()[:5]:
    print(p, p.grad)

from graphviz import Digraph

def trace(root):
    """Builds a set of all nodes and edges in the computation graph."""
    nodes, edges = set(), set()

    def build(v):
        if v not in nodes:
            nodes.add(v)
            for child in v._prev:
                edges.add((child, v))
                build(child)

    build(root)
    return nodes, edges

def draw_dot(root):
    """
    Produces a Graphviz Digraph object visualizing the computation graph
    starting from the given root Value.
    """
    dot = Digraph(format='svg', graph_attr={'rankdir': 'LR'})

    nodes, edges = trace(root)

    for n in nodes:
        uid = str(id(n))
        label = n.label if n.label else ""
        # Create rectangular node for each Value
        dot.node(
            name=uid,
            label=f"{{ {label} | data={n.data:.4f} | grad={n.grad:.4f} }}",
            shape='record',
            style='filled',
            fillcolor='lightyellow'
        )

        if n._op:
            # Create a separate small op node (circle)
            dot.node(name=uid + n._op, label=n._op, shape='circle', style='filled', fillcolor='lightblue')
            dot.edge(uid + n._op, uid)

    for n1, n2 in edges:
        dot.edge(str(id(n1)), str(id(n2)) + n2._op)

    return dot

# Example forward + backward pass
x = [Value(2.0, label='x1'), Value(-1.0, label='x2'), Value(0.5, label='x3')]
y_true = Value(1.0, label='y_true')

mlp = MLP(3, [4, 4, 1])
y_pred = mlp(x)
y_pred.label = 'y_pred'

loss = (y_pred - y_true) ** 2
loss.label = 'loss'

# Compute gradients
loss.backward()

# Draw the computation graph
dot = draw_dot(loss)
dot.render('micrograd_graph', view=True)  # saves and opens 'micrograd_graph.svg'